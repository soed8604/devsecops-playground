"use strict";(self.webpackChunkes_documentacion_devops=self.webpackChunkes_documentacion_devops||[]).push([[8612],{7338:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"kubernetes/instalacion/kubeadm-init","title":"Inicializar el Primer Control Plane","description":"Este es el paso donde inicias el cluster de Kubernetes en el primer nodo Control Plane (k8s-master-01 con IP 192.168.100.12).","source":"@site/docs/kubernetes/instalacion/03-kubeadm-init.md","sourceDirName":"kubernetes/instalacion","slug":"/kubernetes/instalacion/kubeadm-init","permalink":"/devsecops-playground/docs/kubernetes/instalacion/kubeadm-init","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/kubernetes/instalacion/03-kubeadm-init.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Inicializar el Primer Control Plane"},"sidebar":"tutorialSidebar","previous":{"title":"Configuraci\xf3n de HAProxy Load Balancer","permalink":"/devsecops-playground/docs/kubernetes/instalacion/haproxy-setup"},"next":{"title":"Instalar CNI Calico","permalink":"/devsecops-playground/docs/kubernetes/instalacion/calico-install"}}');var r=s(4848),o=s(8453);const i={sidebar_position:3,title:"Inicializar el Primer Control Plane"},t="Inicializar el Primer Control Plane (k8s-master-01)",d={},l=[];function c(e){const n={code:"code",h1:"h1",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"inicializar-el-primer-control-plane-k8s-master-01",children:"Inicializar el Primer Control Plane (k8s-master-01)"})}),"\n",(0,r.jsxs)(n.p,{children:["Este es el paso donde inicias el cluster de Kubernetes en el primer nodo Control Plane (",(0,r.jsx)(n.code,{children:"k8s-master-01"})," con IP 192.168.100.12)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pasos en el primer nodo Control Plane (192.168.100.12):"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Instalar los paquetes necesarios (Docker/Containerd, kubeadm, kubelet, kubectl)."}),"\nAseg\xfarate de que el entorno de ejecuci\xf3n de contenedores (como Docker o Containerd) y las herramientas de Kubernetes (",(0,r.jsx)(n.code,{children:"kubeadm"}),", ",(0,r.jsx)(n.code,{children:"kubelet"}),", ",(0,r.jsx)(n.code,{children:"kubectl"}),") est\xe9n instalados y configurados seg\xfan los pasos est\xe1ndar de ",(0,r.jsx)(n.code,{children:"kubeadm"})," para tu distribuci\xf3n (Ubuntu). Esto generalmente implica a\xf1adir los repositorios de Kubernetes y Docker/Containerd y luego instalar los paquetes."]}),"\n",(0,r.jsx)(n.p,{children:"[Tu descripci\xf3n aqu\xed sobre c\xf3mo instalaste Docker/Containerd y las herramientas de kubeadm]"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Ejemplo de comandos comunes (pueden variar seg\xfan tu versi\xf3n/distro)\n# Instalar Containerd:\n# sudo apt update && sudo apt install -y containerd.io\n# sudo systemctl enable --now containerd\n\n# A\xf1adir repos de Kubernetes y descargar paquetes:\n# sudo apt update\n# sudo apt install -y apt-transport-https ca-certificates curl\n# curl -fsSL https://pkgs.k8s.io/core:/stable:/vX.Y/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n# echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/vX.Y/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n# sudo apt update\n# sudo apt install -y kubelet kubeadm kubectl\n# sudo apt-mark hold kubelet kubeadm kubectl\n\n# Configurar cgroup driver para kubelet si usas containerd\n# Verificar el driver de containerd: sudo containerd config default | grep SystemdCgroup\n# Configurar kubelet para usar systemd: Editar /etc/default/kubelet o un drop-in en /etc/systemd/system/kubelet.service.d/\n"})}),"\n",(0,r.jsx)(n.p,{children:"[Tu salida de comandos de verificaci\xf3n de instalaci\xf3n aqu\xed, ej: docker --version, containerd --version, kubeadm version]"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Inicializar el cluster con ",(0,r.jsx)(n.code,{children:"kubeadm init"}),"."]}),"\nEste es el comando clave que inicia el plano de control en este servidor. Apunta al balanceador de carga y especifica el rango de IPs para los pods."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# En el primer nodo Control Plane (192.168.100.12)\nsudo kubeadm init \\\n  --control-plane-endpoint 192.168.100.7:6443 \\\n  --upload-certs \\\n  --pod-network-cidr 192.168.0.0/16 \\\n  --apiserver-advertise-address 192.168.100.12\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--control-plane-endpoint 192.168.100.7:6443"}),": Indica a todos los nodos c\xf3mo contactar al API Server (a trav\xe9s del balanceador). ",(0,r.jsx)(n.strong,{children:"Reemplaza con tu IP del Balanceador."})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--upload-certs"}),": Sube los certificados necesarios al cluster para que otros Control Planes puedan unirse de forma segura."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--pod-network-cidr 192.168.0.0/16"}),": Define el rango de IPs para la red de Pods. ",(0,r.jsx)(n.strong,{children:"Este CIDR debe coincidir con la configuraci\xf3n de Calico."})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--apiserver-advertise-address 192.168.100.12"}),": La IP de este nodo Control Plane que el API Server debe usar para anunciarse (importante en setups HA). ",(0,r.jsx)(n.strong,{children:"Reemplaza con la IP de este primer maestro."})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"[Tu salida completa del comando sudo kubeadm init aqu\xed]"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Configurar ",(0,r.jsx)(n.code,{children:"kubectl"})," para el usuario ",(0,r.jsx)(n.code,{children:"k8sadmin"}),"."]}),"\nLa salida de ",(0,r.jsx)(n.code,{children:"kubeadm init"})," te dar\xe1 estos comandos. Ejec\xfatalos en el mismo nodo Control Plane para poder usar ",(0,r.jsx)(n.code,{children:"kubectl"})," como usuario normal."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# En el primer nodo Control Plane (192.168.100.12)\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown <span class="math-inline">\\(id \\-u\\)\\:</span>(id -g) $HOME/.kube/config\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Guarda el comando ",(0,r.jsx)(n.code,{children:"kubeadm join"})," para unir otros nodos."]}),"\nLa salida de ",(0,r.jsx)(n.code,{children:"kubeadm init"})," tambi\xe9n te proporcionar\xe1 el comando exacto que necesitas ejecutar en los otros nodos Control Plane y Workers para unirse al cluster. Copia este comando y gu\xe1rdalo para los pr\xf3ximos pasos. Deber\xe1 incluir el token y el hash de descubrimiento."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Ejemplo del comando join para Workers (puede variar)\nkubeadm join 192.168.100.7:6443 --token abcdef.1234567890abcdef \\\n    --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"})}),"\n",(0,r.jsx)(n.p,{children:"Y un comando similar pero con flags adicionales para unir otros Control Planes."}),"\n",(0,r.jsx)(n.p,{children:"[Tu comando kubeadm join workers aqu\xed]\n[Tu comando kubeadm join masters aqu\xed, que incluir\xe1 --control-plane --certificate-key]"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var a=s(6540);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);